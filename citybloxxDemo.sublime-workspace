{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inve",
				"InverseTransformPoint(Vector3 position)\tVector3"
			],
			[
				"loc",
				"localPosition\tVector3"
			],
			[
				"l",
				"localEulerAngles\tVector3"
			],
			[
				"ve",
				"Vector2\tVector2"
			],
			[
				"local",
				"localRotation\tQuaternion"
			],
			[
				"t",
				"transform\tTransform"
			],
			[
				"ro",
				"rootPosOffsetZ\tfloat"
			],
			[
				"roo",
				"rootPosOffsetY\tfloat"
			],
			[
				"of",
				"offsetZ\tfloat"
			],
			[
				"e2",
				"e2m\tint"
			],
			[
				"max",
				"maxRot\tfloat"
			],
			[
				"my",
				"myPos\tVector3"
			],
			[
				"sp",
				"spawnNum\tint"
			],
			[
				"vecto",
				"Vector3\tVector3"
			],
			[
				"new",
				"newSpawnPos\tVector3"
			],
			[
				"spa",
				"spawnPosOffsetX\tfloat"
			],
			[
				"gam",
				"gameDiffLvl\tint"
			],
			[
				"to",
				"totalPieceNum\tint"
			],
			[
				"tru",
				"turnSignal\tfloat"
			],
			[
				"diff",
				"diffLvl\tint"
			],
			[
				"total",
				"totalPieceNum\tint"
			],
			[
				"col",
				"columnObj\tTransform"
			],
			[
				"Find",
				"FindChild\tFindChild"
			],
			[
				"finob",
				"FindObjectOfType<T>()\tT"
			],
			[
				"FindObjectOfType",
				"FindObjectOfType<T>()\tT"
			],
			[
				"con",
				"config\tint"
			],
			[
				"confi",
				"configuration\tint"
			],
			[
				"age",
				"AgentAction(float[] vectorAction, string textAction)\tvoid"
			],
			[
				"tar",
				"targetTran\tTransform"
			],
			[
				"target",
				"targetRb2d\tRigidbody2D"
			],
			[
				"rigi",
				"Rigidbody2D\tRigidbody2D"
			],
			[
				"ri",
				"Rigidbody2D\tRigidbody2D"
			],
			[
				"ranm",
				"Random\tRandom"
			],
			[
				"am",
				"amplitudeMove\tfloat"
			],
			[
				"vec",
				"Vector3\tVector3"
			],
			[
				"ml",
				"mlColumn\tTransform"
			],
			[
				"Stri",
				"string\tstring"
			],
			[
				"moni",
				"monitorObj\tTransform"
			],
			[
				"agent",
				"agentParameters\tAgentParameters"
			],
			[
				"agen",
				"AgentParameters\tAgentParameters"
			],
			[
				"tr",
				"true\ttrue"
			],
			[
				"amp",
				"amplitudeRotate\tfloat"
			],
			[
				"dis",
				"distance_max\tfloat"
			],
			[
				"Ma",
				"Mathf\tMathf"
			],
			[
				"del",
				"delta\tfloat"
			],
			[
				"de",
				"deltaDegree\tfloat"
			],
			[
				"dif",
				"diffFactors\tfloat[]"
			],
			[
				"eva",
				"EvaluateRotateDiffLvl(float factor, float[] subList, string[] diffLvl)\tvoid"
			],
			[
				"fac",
				"factorIdx\tint"
			],
			[
				"e",
				"Equals(string a, string b)\tbool"
			],
			[
				"requ",
				"RequestDecision()\tvoid"
			],
			[
				"thi",
				"thinkingTime\tint"
			],
			[
				"Req",
				"RequestDecision()\tvoid"
			],
			[
				"Ag",
				"AgentAction(float[] vectorAction, string textAction)\tvoid"
			],
			[
				"tim",
				"timeOffset\tfloat"
			],
			[
				"an",
				"angularSpeed\tfloat"
			],
			[
				"time",
				"Time\tTime"
			],
			[
				"cl",
				"Clamp(float value, float min, float max)\tfloat"
			],
			[
				"rew",
				"reward\tfloat"
			],
			[
				"mem",
				"MemberInfo\tMemberInfo"
			],
			[
				"get",
				"GetType()\tType"
			],
			[
				"pow",
				"Power_Hybrid(float distance)\tfloat"
			],
			[
				"CBXre",
				"CBXSwingReward\tCBXSwingReward"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"mlTarget",
				"mlTargetRb2d\tRigidbody2D"
			],
			[
				"Rigi",
				"Rigidbody2D\tRigidbody2D"
			],
			[
				"ML",
				"ML_Piece\tML_Piece"
			],
			[
				"mono",
				"MonoBehaviour\tMonoBehaviour"
			],
			[
				"M",
				"Mathf\tMathf"
			],
			[
				"ar",
				"args\tstring[]"
			],
			[
				"en",
				"Environment\tEnvironment"
			],
			[
				"top",
				"topPieceLocalPos\tVector3"
			],
			[
				"dro",
				"dropPieceLocalPos\tVector3"
			],
			[
				"re",
				"return\treturn"
			],
			[
				"Collision",
				"CollisionControl\tCollisionControl"
			],
			[
				"com",
				"ComputeReward(Vector3 dropPos)\tvoid"
			],
			[
				"agnet",
				"agentInfo\tagentInfo"
			],
			[
				"ag",
				"AgentReset()\tvoid"
			],
			[
				"is",
				"isJustCalledDone\tbool"
			],
			[
				"m",
				"MLAgents\tMLAgents"
			],
			[
				"a",
				"agentObj\tCBXPieceAgent"
			],
			[
				"CBX",
				"CBXAcademy\tCBXAcademy"
			],
			[
				"flto",
				"FloorToInt(float f)\tint"
			],
			[
				"pie",
				"piecePrefab\tGameObject"
			],
			[
				"tou",
				"touchCount\tint"
			],
			[
				"sta",
				"stackRange\tfloat"
			],
			[
				"fal",
				"false\tfalse"
			],
			[
				"fall",
				"fallenWaterAnim\tParticleSystem"
			],
			[
				"rot",
				"rotationYoffset\tfloat"
			],
			[
				"cam",
				"cameraPos\tVector3"
			],
			[
				"wor",
				"WorldToScreenPoint(Vector3 position)\tVector3"
			],
			[
				"pl",
				"PlayFallenWaterAnim(Vector3 pos)\tvoid"
			],
			[
				"colo",
				"Color\tColor"
			],
			[
				"stop",
				"StopComboPeriodAnim()\tvoid"
			],
			[
				"p",
				"PlayStackDeadCenterAnim(Vector3 pos)\tvoid"
			],
			[
				"isp",
				"isPlaying\tbool"
			],
			[
				"tra",
				"transform\tTransform"
			],
			[
				"par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"Par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"sor",
				"sortingLayerName\tstring"
			],
			[
				"inex",
				"InExpo\tEase"
			],
			[
				"eas",
				"Ease\tEase"
			],
			[
				"loca",
				"localRotation\tQuaternion"
			],
			[
				"f",
				"From()\tTweener"
			],
			[
				"Tweene",
				"Tweener\tTweener"
			],
			[
				"A",
				"AppendCallback(TweenCallback callback)\tSequence"
			],
			[
				"pla",
				"PlayBackwards()\tvoid"
			],
			[
				"dotw",
				"DOTween\tDOTween"
			],
			[
				"s",
				"StopMotion(int motionFps, AnimationCurve animCurve)\tEaseFunction"
			],
			[
				"setsp",
				"SetSpeedBased(bool isSpeedBased)\tTweener"
			],
			[
				"Dotw",
				"doTween\tDoTweenControl"
			],
			[
				"Outqu",
				"OutQuart\tEase"
			],
			[
				"pi",
				"pivot\tVector3"
			],
			[
				"do",
				"DoPunchRotation\tDoPunchRotation"
			],
			[
				"pos",
				"position\tVector3"
			],
			[
				"dopunch",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"collider",
				"Collider2D\tCollider2D"
			],
			[
				"rata",
				"RotateAround(Vector3 axis, float angle)\tvoid"
			],
			[
				"co",
				"collider\tCollider2D"
			],
			[
				"dolook",
				"DOLookAt(Vector3 towards, float duration, AxisConstraint axisConstraint = None, Vector3? up = null)\tTweener"
			],
			[
				"inouqu",
				"InOutQuart\tEase"
			],
			[
				"ouq",
				"OutQuart\tEase"
			],
			[
				"out",
				"OutQuart\tEase"
			],
			[
				"dopu",
				"DOPunchPosition(Vector3 punch, float duration)\tTweener"
			],
			[
				"ani",
				"StackingNoDeadCenterAnimation()\tvoid"
			],
			[
				"dopun",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"sc",
				"localScale\tVector3"
			],
			[
				"set",
				"SetEase(Ease ease)\tTweenerCore<Quaternion, Vector3, QuaternionOptions>"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Assets/ML_Agents/Editor/PrefabUtility.cs",
			"settings":
			{
				"buffer_size": 1974,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/GamePlay/Scripts/GameControl.cs",
			"settings":
			{
				"buffer_size": 4861,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/ML_Agents/ML_Scripts/CCMStackAgent.cs",
			"settings":
			{
				"buffer_size": 4027,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/GamePlay/Scripts/ColumnSwinging.cs",
			"settings":
			{
				"buffer_size": 3899,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/ML_Agents/ML_Scripts/CBXPieceAgent.cs",
			"settings":
			{
				"buffer_size": 4417,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/ML_Agents/ML_Scripts/CBXSwingReward.cs",
			"settings":
			{
				"buffer_size": 3234,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n    public DoTweenControl doTween;\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public bool isFallen = false;\n\n    public float deadCenterRange = 0.08f;\n    public float stackRange = 0.5f;\n\n\tpublic Rigidbody2D rb2d;\n    public Transform columnObj;\n    public CCMStackAgent agentObj;\n    public CBXPieceAgent cbxPieceAgentObj;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n        columnObj = this.transform.parent.Find(\"Column\");\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\") || Input.touchCount > 0)\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.identity;\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D(Collision2D ctl)\n    {\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            Parent2Column();        \n        }\n    }\n\n    public void Parent2Column()\n    {\n\n        // transform.SetParent(GameControl.instance.columnObj.transform, true);\n        transform.SetParent(columnObj, true);        \n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        GameControl.instance.mycolObj.SetCollisionInfo(ctl);\n        if(!isStacked)\n        {\n            GameControl.instance.mycolObj.GetColumnHeightIncrement();\n            if(CheckIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n                // doTween.StackingNoDeadCenterAnimation(stackStatus.fallenSide, stackStatus.isDeadCenter);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                // OnStackingFailed();\n\n            }\n            // GameControl.instance.saverAgentObj.RequestDecision();\n            if(agentObj)\n            {\n                if(stackStatus.isDeadCenter)\n                    agentObj.m_SetRewrd(1f);\n                else\n                    agentObj.m_SetRewrd(-1f);\n                agentObj.Done();\n                agentObj.isJustCalledDone = true;\n            }\n\n            else if(cbxPieceAgentObj)\n            {\n                cbxPieceAgentObj.ComputeReward();\n                cbxPieceAgentObj.Done();\n                cbxPieceAgentObj.isJustCalledDone = true;\n            }\n            // Debug.Log(\"culmalitive reward = \" + agentObj.GetReward().ToString(), gameObject);\n        }\n        isStacked = true;\n    }\n\n    public bool CheckIfCanStack(Collision2D ctl)\n    {\n        float absDeltaX = Mathf.Abs(GameControl.instance.mycolObj.deltaX);\n\n        if(ctl.collider.gameObject.tag == \"Ground\")\n        {\n            return false;\n        }\n\n        checkFallenSide();\n        // doTween.GetDeltaXFromCollision(absDeltaX);\n       \n        if(absDeltaX < stackRange)\n        {\n            isFallen = false;\n            checkIfDeadCenter(absDeltaX, GameControl.instance.mycolObj.topPieceLocalPos.x, ctl.otherCollider);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            // checkFallenSide(deltaX);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            isFallen = true;\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n            pos = other.transform.position;\n            pos.z -= 0.5f;\n            pos.y -= 0.5f;\n            // GameControl.instance.particleObj.PlayStackDeadCenterAnim(pos);\n            // GameControl.instance.particleObj.PlayComboPeriodAnim();\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide()\n    {\n        if(GameControl.instance.mycolObj.deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;  // right side\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;  // left side\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n    private void OnStackingFailed()\n    {\n        // transform.position = new Vector3(0, -10f, 0);\n        // GameControl.instance.doTweenObj.FallenAnimation(1); // cannot get the true transform\n        // doTween.FallenAnimation(stackStatus.fallenSide);\n        transform.parent = null;\n    }\n}\n",
			"file": "Assets/GamePlay/Scripts/Piece.cs",
			"file_size": 6014,
			"file_write_time": 132081924232663217,
			"settings":
			{
				"buffer_size": 5826,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/ML_Agents/ML_Scripts/SpawnMLArea.cs",
			"settings":
			{
				"buffer_size": 404,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"settings syn",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sublimgdb",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"sublimegdb",
				"SublimeGDB: Start Debugging"
			],
			[
				"command",
				"Preferences: Terminal View: Palette Commands"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"oa",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"Markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"MarkDown",
				"Set Syntax: Markdown"
			],
			[
				"markdownlivepreview",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"markdown",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control:soda",
				"Package Control: Install Local Dependency"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 358.0,
		"history":
		[
			"c",
			"clear",
			"subl_remote_edit s1702794 cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.ul",
			"subl_remote_edit ALIAS",
			"subl_remote_edit",
			"subl_remote_edit ALIAS",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"> subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" sb_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS, PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/Utilities",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts"
	],
	"file_history":
	[
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXDDAAgent.cs",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/ColumnSwinging.cs",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/EllipticalOrbit.cs",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/Utilities/Extension.cs",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/PiecePool.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXPieceAgent.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXSaverAgent.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/SpawnMLArea.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/Editor/PrefabUtility.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXSwingReward.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_SourceFiles/config/trainer_config.yaml",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/MyCollisionControl.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/SaverAgent.cs",
		"/Users/alex/cbx_rl/Assets/GamePlay/Scripts/Utilities/NoUse/RotateWithSwinging.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXReward.cs",
		"/Users/alex/cbx_rl/Assets/ML_Agents/ML_SourceFiles/ML-Agents/Scripts/Agent.cs",
		"/Users/alex/citybloxxDemo/Assets/ML_Agents/ML_Scripts/ML_GameControl.cs",
		"/Users/alex/citybloxxDemo/Assets/ML_Agents/ML_Scripts/ML_Piece.cs",
		"/Users/alex/citybloxxDemo/Assets/ML_SourceFiles/config/trainer_config.yaml",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Extension.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/GameControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ComboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Piece.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/MyCollisionControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CBXPieceAgent.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ColumnSwinging.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CBXAcademy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/CmdControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/DoTweenControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/CollisionControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/PiecePool.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ScreenMoveUp.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CBXSlingAgent.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ParticleControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CitybloxxAcademy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/Academy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/EllipticalOrbit.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/comboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/StackingEffect.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/HingePush.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ForceToSwing.cs",
		"/Users/alex/citybloxxDemo/citybloxxDemo.sublime-project",
		"/Users/alex/Desktop/test.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/ScrollingObject.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/RepeatingBG.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/bird.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/GameControl.cs",
		"/Users/alex/Desktop/temp.py",
		"/Users/alex/Desktop/FB",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/D0B3D9B9-9DED-4374-A3E4-9A82C5161519/Edinburgh University charitable status.txt",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/CB257155-28D8-4FC3-B86D-8C98404FD4A0/s1702794.txt",
		"/Users/alex/Desktop/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/exp/icc_advisor.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/runtime_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/gprof_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/obj/ipo_out.optrpt",
		"/Users/alex/Desktop/cirrus/temp/MD/runtime_output/baseline/baseline-O0/baseline-O0_0.txt",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/icc_advisor.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/Makefile",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/test.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/Test/diff-output.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.o943845",
		"/Users/alex/Desktop/cirrus/temp/MD/C/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat100",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat010",
		"/Users/alex/Desktop/cirrus/temp/MD/C/input.dat",
		"/Users/alex/Desktop/cirrus/temp/MD/C/profile_O0.txt",
		"/Users/alex/project_templete/src/main.c",
		"/Users/alex/Library/Application Support/Sublime Text 3/Packages/User/SublimeGDB.sublime-settings",
		"/Users/alex/Desktop/cirrus/temp/MD/report_words.md",
		"/Users/alex/Desktop/cirrus/.bash_profile",
		"/Users/alex/Desktop/cirrus/temp/MD/C/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.pbs",
		"/Users/alex/Desktop/cirrus/temp/TP/cw2/backend.pbs",
		"/Users/alex/Desktop/cirrus/temp/MPI/cw/mppcw/cw/backend.pbs",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise4/IndependentQLearning/IndependentQLearning.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise3/Environment.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DataInput.csv",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/RandomAgentExample/DiscretizedRandomAttackingController.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/QLearning/QLearningBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/UnitTestExample/ExampleUnitTest.py",
		"/Users/alex/Desktop/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DiscreteHFO/HFOAttackingPlayer.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarloBase.py",
		"/Users/alex/Desktop/cirrus/.bashrc",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise1/BellmanDPBase.py",
		"/Users/alex/Desktop/plot.py",
		"/Users/alex/Downloads/10.1007_978-3-642-27645-3_17.ris",
		"/Users/alex/Downloads/citation-265284198.txt",
		"/Users/alex/Downloads/S0747563216300188.txt",
		"/Users/alex/Downloads/S0747563216300188.ris",
		"/Users/alex/Downloads/CitationList.ris",
		"/Users/alex/Desktop/test_submit.sh",
		"/Users/alex/Downloads/alex_latex.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81 (1).bib",
		"/Users/alex/Downloads/alex.txt",
		"/Users/alex/Desktop/mlp2019/src/builder.py",
		"/Users/alex/Desktop/mlp2019/mkfold/dsfold1.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81.bib",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/acc.sh",
		"/Users/alex/Desktop/mlp_cluster/mlpractical/arg_extractor.py",
		"/Users/alex/Desktop/mlp_temp/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp_temp/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp2019/mkfold/mkfold.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/submit.sh",
		"/Users/alex/Desktop/install.sh",
		"/Users/alex/Downloads/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/data_handler.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301961.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/preprocessing.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_stride.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_dilation.sh",
		"/Users/alex/Desktop/mlp2019/patch_test/dump1.txt",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301526.out"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"root",
			"debug",
			"debug.dr",
			"debu",
			"dr",
			"monitorObj",
			"monitor",
			"debug",
			"localRotation",
			";            ",
			"i",
			"diffLvl",
			"amplitudeIncrement",
			"HookNewPiece",
			"        offsetX = this.transform.parent.position.x;\n        offsetZ = this.transform.parent.position.z;\n",
			"hook",
			"mltar",
			"setp",
			"reset",
			"Accuracy",
			"GetStepCount",
			"CurrentStepCount",
			"debug",
			"debug.log",
			"angle",
			"reward",
			"private"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"situType",
			"public"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/ML_Agents/Editor/PrefabUtility.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1974,
						"regions":
						{
						},
						"selection":
						[
							[
								586,
								586
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"1483,1496": "'“PrefabUtility.GetPrefabType(Object)”已过时:“Use GetPrefabAssetType and GetPrefabInstanceStatus to get the full picture about Prefab types.”",
								"1518,1528": "'“PrefabType”已过时:“PrefabType no longer tells everything about Prefab instance.”",
								"1539,1552": "'“PrefabUtility.GetPrefabType(Object)”已过时:“Use GetPrefabAssetType and GetPrefabInstanceStatus to get the full picture about Prefab types.”",
								"1574,1584": "'“PrefabType”已过时:“PrefabType no longer tells everything about Prefab instance.”"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/GamePlay/Scripts/GameControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4861,
						"regions":
						{
						},
						"selection":
						[
							[
								1881,
								1849
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"0,6": "不需要的 using 指令。",
								"137,142": "不需要的 using 指令。",
								"27,32": "不需要的 using 指令。",
								"600,611": "“/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXDDA]Agent.cs”中的类型“CBXDDAAgent”与“MacBLAS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”中的导入类型“CBXDDAAgent”冲突。请使用“/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CBXDDA]Agent.cs”中定义的类型。"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/ML_Agents/ML_Scripts/CCMStackAgent.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4027,
						"regions":
						{
						},
						"selection":
						[
							[
								2795,
								2803
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"2974,2984": "当前上下文中不存在名称“columnTran”"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1803.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/GamePlay/Scripts/ColumnSwinging.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3899,
						"regions":
						{
						},
						"selection":
						[
							[
								1795,
								1795
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "Assets/ML_Agents/ML_Scripts/CBXPieceAgent.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4417,
						"regions":
						{
						},
						"selection":
						[
							[
								1824,
								1824
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"120,125": "不需要的 using 指令。",
								"1841,1850": "当前上下文中不存在名称“targetPos”",
								"25,30": "不需要的 using 指令。",
								"51,56": "不需要的 using 指令。"
							},
							"origin_encoding": "ASCII",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1022.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/ML_Agents/ML_Scripts/CBXSwingReward.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3234,
						"regions":
						{
						},
						"selection":
						[
							[
								1317,
								1329
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/GamePlay/Scripts/Piece.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5826,
						"regions":
						{
						},
						"selection":
						[
							[
								3024,
								3024
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"2861,2877": "在“CCMStackAgent.isJustCalledDone”和“CCMStackAgent.isJustCalledDone”之间具有二义性",
								"586,599": "“/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CCMStackLearning.cs”中的类型“CCMStackAgent”与“MacBLAS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”中的导入类型“CCMStackAgent”冲突。请使用“/Users/alex/cbx_rl/Assets/ML_Agents/ML_Scripts/CCMStackLearning.cs”中定义的类型。"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n    public DoTweenControl doTween;\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public bool isFallen = false;\n\n    public float deadCenterRange = 0.08f;\n    public float stackRange = 0.5f;\n\n\tpublic Rigidbody2D rb2d;\n    public Transform columnObj;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n        columnObj = this.transform.parent.Find(\"Column\");\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\") || Input.touchCount > 0)\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.identity;\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D(Collision2D ctl)\n    {\n        Debug.Log(\"who hit me!\", gameObject);\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            Parent2Column();        \n        }\n    }\n\n    public void Parent2Column()\n    {\n\n        // transform.SetParent(GameControl.instance.columnObj.transform, true);\n        transform.SetParent(columnObj, true);        \n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        GameControl.instance.mycolObj.SetCollisionInfo(ctl);\n        if(!isStacked)\n        {\n            GameControl.instance.mycolObj.GetColumnHeightIncrement();\n            if(CheckIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n                // doTween.StackingNoDeadCenterAnimation(stackStatus.fallenSide, stackStatus.isDeadCenter);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                // OnStackingFailed();\n            }\n            // GameControl.instance.saverAgentObj.RequestDecision();\n        }\n        isStacked = true;\n    }\n\n    public bool CheckIfCanStack(Collision2D ctl)\n    {\n        float absDeltaX = Mathf.Abs(GameControl.instance.mycolObj.deltaX);\n\n        if(ctl.collider.gameObject.tag == \"Ground\")\n        {\n            return false;\n        }\n\n        checkFallenSide();\n        // doTween.GetDeltaXFromCollision(absDeltaX);\n       \n        if(absDeltaX < stackRange)\n        {\n            isFallen = false;\n            checkIfDeadCenter(absDeltaX, GameControl.instance.mycolObj.topPieceLocalPos.x, ctl.otherCollider);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            // checkFallenSide(deltaX);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            isFallen = true;\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n            pos = other.transform.position;\n            pos.z -= 0.5f;\n            pos.y -= 0.5f;\n            // GameControl.instance.particleObj.PlayStackDeadCenterAnim(pos);\n            // GameControl.instance.particleObj.PlayComboPeriodAnim();\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide()\n    {\n        if(GameControl.instance.mycolObj.deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;  // right side\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;  // left side\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n    private void OnStackingFailed()\n    {\n        // transform.position = new Vector3(0, -10f, 0);\n        // GameControl.instance.doTweenObj.FallenAnimation(1); // cannot get the true transform\n        // doTween.FallenAnimation(stackStatus.fallenSide);\n        transform.parent = null;\n    }\n\n    void OnBecameInvisible()\n    {\n        // if(isFallen)\n        //     GameControl.instance.particleObj.PlayFallenWaterAnim(transform.position);\n    }\n\n    public virtual void myTest()\n    {\n        Debug.Log(\"Piece\", gameObject);\n    }\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": true,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/ML_Agents/ML_Scripts/SpawnMLArea.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 404,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.373741972118,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 157.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 157.0
	},
	"pinned_build_system": "",
	"project": "citybloxxDemo.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Remote Edit: Open Remote File Prompt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/cbx_rl/citybloxxDemo.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 166.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
